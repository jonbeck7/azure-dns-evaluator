#!/usr/bin/env python3
"""
Azure DNS Batch Import Tool

This script imports split DNS zone files to Azure DNS in the correct order.
Use this after running the Azure DNS evaluator with the --split option.

Requirements:
- Azure CLI installed and configured
- Split zone files generated by azure_dns_evaluator.py --split

Usage:
    python batch_import.py --resource-group myRG --zone-name example.com --split-directory ./zone_split
"""

import os
import subprocess
import glob
import time
import argparse
import json
from pathlib import Path

def run_az_command(command, capture_output=True):
    """Run Azure CLI command and return success status and output"""
    try:
        result = subprocess.run(command, shell=True, capture_output=capture_output, text=True)
        if result.returncode == 0:
            return True, result.stdout.strip() if capture_output else ""
        else:
            return False, result.stderr.strip() if capture_output else ""
    except Exception as e:
        return False, str(e)

def check_azure_cli():
    """Check if Azure CLI is installed and user is logged in"""
    print("Checking Azure CLI...")
    
    # Check if az command exists
    success, _ = run_az_command("az --version")
    if not success:
        print("✗ Azure CLI not found. Please install Azure CLI first.")
        print("  Download from: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli")
        return False
    
    # Check if user is logged in
    success, account_info = run_az_command("az account show")
    if not success:
        print("✗ Not logged into Azure. Please run 'az login' first.")
        return False
    
    try:
        account = json.loads(account_info)
        print(f"✓ Logged in as: {account.get('user', {}).get('name', 'Unknown')}")
        print(f"✓ Subscription: {account.get('name', 'Unknown')} ({account.get('id', 'Unknown')})")
        return True
    except:
        print("✗ Unable to parse Azure account information")
        return False

def validate_split_files(split_directory):
    """Validate all split files before importing"""
    print("Validating split files...")
    split_files = sorted(glob.glob(os.path.join(split_directory, "*_part_*.txt")))
    
    if not split_files:
        print(f"✗ No split files found in {split_directory}")
        return False
    
    all_valid = True
    for file_path in split_files:
        file_name = os.path.basename(file_path)
        print(f"  Validating {file_name}...")
        
        # Check if azure_dns_evaluator.py exists
        if not os.path.exists("azure_dns_evaluator.py"):
            print(f"  ⚠ Skipping validation - azure_dns_evaluator.py not found")
            continue
        
        result = subprocess.run([
            "python", "azure_dns_evaluator.py", file_path
        ], capture_output=True)
        
        if result.returncode != 0:
            print(f"  ✗ Validation failed for {file_name}")
            all_valid = False
        else:
            print(f"  ✓ Validation passed for {file_name}")
    
    return all_valid

def check_zone_exists(resource_group, zone_name):
    """Check if DNS zone already exists"""
    success, output = run_az_command(f"az network dns zone show --resource-group {resource_group} --name {zone_name}")
    return success

def create_dns_zone(resource_group, zone_name):
    """Create DNS zone if it doesn't exist"""
    if check_zone_exists(resource_group, zone_name):
        print(f"✓ DNS zone {zone_name} already exists")
        return True
    
    print(f"Creating DNS zone {zone_name}...")
    success, output = run_az_command(f"az network dns zone create --resource-group {resource_group} --name {zone_name}")
    
    if success:
        print(f"✓ Created DNS zone {zone_name}")
        return True
    else:
        print(f"✗ Failed to create DNS zone: {output}")
        return False

def import_zone_file(resource_group, zone_name, file_path):
    """Import a single zone file"""
    file_name = os.path.basename(file_path)
    print(f"  Importing {file_name}...")
    
    # Use double quotes around file path to handle spaces
    import_cmd = f'az network dns zone import --resource-group "{resource_group}" --name "{zone_name}" --file-name "{file_path}"'
    
    success, output = run_az_command(import_cmd)
    
    if success:
        print(f"  ✓ Successfully imported {file_name}")
        return True
    else:
        print(f"  ✗ Failed to import {file_name}")
        print(f"    Error: {output}")
        return False

def import_zone_files(resource_group, zone_name, split_directory, validate_first=False):
    """Import split zone files in the correct order"""
    split_path = Path(split_directory)
    
    if not split_path.exists():
        print(f"✗ Split directory not found: {split_directory}")
        return False
    
    # Validate files if requested
    if validate_first and not validate_split_files(split_directory):
        print("✗ Validation failed. Fix errors before importing.")
        return False
    
    # Create DNS zone
    if not create_dns_zone(resource_group, zone_name):
        return False
    
    # Find all split files
    split_files = sorted(glob.glob(str(split_path / "*_part_*.txt")))
    
    if not split_files:
        print(f"✗ No split files found in {split_directory}")
        return False
    
    print(f"Found {len(split_files)} split files to import")
    
    # Import files in order
    success_count = 0
    failed_files = []
    
    for i, file_path in enumerate(split_files, 1):
        file_name = os.path.basename(file_path)
        part_number = file_name.split('_part_')[1].split('.')[0] if '_part_' in file_name else str(i)
        
        print(f"\nImporting part {part_number} ({i}/{len(split_files)}): {file_name}")
        
        if import_zone_file(resource_group, zone_name, file_path):
            success_count += 1
        else:
            failed_files.append(file_name)
            # Continue with next file rather than stopping
        
        # Rate limiting delay between imports
        if i < len(split_files):  # Don't sleep after the last file
            print("  Waiting 3 seconds before next import...")
            time.sleep(3)
    
    # Summary
    print(f"\n{'='*50}")
    print(f"Batch import completed!")
    print(f"Success: {success_count}/{len(split_files)} files imported")
    
    if failed_files:
        print(f"Failed files: {', '.join(failed_files)}")
        print("Check the errors above and manually retry failed imports if needed.")
        return False
    else:
        print("✓ All files imported successfully!")
        return True

def main():
    parser = argparse.ArgumentParser(
        description="Batch import split DNS zone files to Azure DNS",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python batch_import.py --resource-group myRG --zone-name example.com --split-directory ./zone_split
  python batch_import.py --resource-group myRG --zone-name example.com --split-directory ./zone_split --validate-first
        """
    )
    
    parser.add_argument("--resource-group", required=True, 
                       help="Azure resource group name")
    parser.add_argument("--zone-name", required=True, 
                       help="DNS zone name (e.g., example.com)")
    parser.add_argument("--split-directory", required=True, 
                       help="Directory containing split zone files")
    parser.add_argument("--validate-first", action="store_true", 
                       help="Validate files before importing (requires azure_dns_evaluator.py)")
    
    args = parser.parse_args()
    
    print("Azure DNS Batch Import Tool")
    print("="*40)
    
    # Check prerequisites
    if not check_azure_cli():
        return 1
    
    # Import files
    print(f"\nStarting batch import...")
    print(f"Resource Group: {args.resource_group}")
    print(f"Zone Name: {args.zone_name}")
    print(f"Split Directory: {args.split_directory}")
    print(f"Validate First: {args.validate_first}")
    
    success = import_zone_files(
        args.resource_group, 
        args.zone_name, 
        args.split_directory, 
        args.validate_first
    )
    
    if success:
        print(f"\n🎉 Batch import completed successfully!")
        print(f"Your DNS zone '{args.zone_name}' is now configured in Azure DNS.")
        print(f"You can view it at: https://portal.azure.com/#@/resource/subscriptions/[subscription]/resourceGroups/{args.resource_group}/providers/Microsoft.Network/dnszones/{args.zone_name}")
        return 0
    else:
        print(f"\n❌ Batch import completed with errors.")
        print("Check the error messages above and retry failed imports manually if needed.")
        return 1

if __name__ == "__main__":
    exit(main())
